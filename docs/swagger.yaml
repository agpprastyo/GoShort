basePath: /
definitions:
  dto.CreateLinkRequest:
    properties:
      click_limit:
        type: integer
      expire_at:
        type: string
      original_url:
        type: string
      short_code:
        type: string
      title:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.LinkResponse:
    properties:
      click_limit:
        type: integer
      created_at:
        type: string
      expire_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      original_url:
        type: string
      short_code:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  dto.UpdateLinkRequest:
    properties:
      click_limit:
        type: integer
      expire_at:
        type: string
      is_active:
        type: boolean
      original_url:
        type: string
      short_code:
        type: string
      title:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: your-email@example.com
    name: API Support
  description: A URL shortener service API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GoShort API
  version: "1.0"
paths:
  /api/v1/admin/links:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of all short links
      parameters:
      - description: Number of links to return per page
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Search term to filter links by title or URL
        in: query
        name: search
        type: string
      - description: Order by field
        enum:
        - created_at
        - title
        - is_active
        - expired_at
        in: query
        name: order_by
        type: string
      - description: Order direction (true for ascending, false for descending)
        in: query
        name: ascending
        type: boolean
      - description: Start date for filtering links (RFC3339 format)
        in: query
        name: start_date
        type: string
      - description: End date for filtering links (RFC3339 format)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Links retrieved successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to retrieve links
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: List all short links
      tags:
      - admin
  /api/v1/admin/links/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a short link by its unique ID
      parameters:
      - description: Short link ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Link retrieved successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid link ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Link not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to retrieve link
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a short link by ID
      tags:
      - admin
  /api/v1/admin/links/{id}/status:
    patch:
      consumes:
      - application/json
      description: Activate or deactivate a short link by its ID
      parameters:
      - description: Short link ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Link status toggled successfully
        "400":
          description: Invalid link ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to toggle link status
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Toggle the active status of a short link
      tags:
      - admin
  /api/v1/admin/users/{userId}/links:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of all short links for a specific user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Number of links to return per page
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Search term to filter links by title or URL
        in: query
        name: search
        type: string
      - description: Order by field
        enum:
        - created_at
        - title
        - is_active
        - expired_at
        in: query
        name: order_by
        type: string
      - description: Order direction (true for ascending, false for descending)
        in: query
        name: ascending
        type: boolean
      - description: Start date for filtering links (RFC3339 format)
        in: query
        name: start_date
        type: string
      - description: End date for filtering links (RFC3339 format)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User links retrieved successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid user ID or query parameters
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to retrieve user links
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: List all short links for a user
      tags:
      - admin
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User Login Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid request body or missing fields
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: User login
      tags:
      - auth
  /api/v1/logout:
    delete:
      consumes:
      - application/json
      description: Clear user session and delete JWT cookie
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "401":
          description: Unauthorized access, user ID not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: User logout
      tags:
      - auth
  /api/v1/profile:
    get:
      consumes:
      - application/json
      description: Retrieve the profile of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Profile retrieved successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "401":
          description: Unauthorized access, user ID not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - auth
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User Registration Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid request body or missing fields
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /health:
    get:
      description: Check if the service is running
      responses: {}
      summary: Health Check
      tags:
      - Health
  /short-links:
    get:
      consumes:
      - application/json
      description: Retrieve all short links created by the authenticated user
      parameters:
      - description: Limit the number of results
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Search term for link titles or original URLs
        in: query
        name: search
        type: string
      - description: Order by field
        enum:
        - created_at
        - title
        - is_active
        - expired_at
        in: query
        name: order_by
        type: string
      - description: Order direction (true for ascending, false for descending)
        in: query
        name: ascending
        type: boolean
      - description: Filter links created after this date (RFC3339 format)
        in: query
        name: start_date
        type: string
      - description: Filter links created before this date (RFC3339 format)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Short links retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.LinkResponse'
                  type: array
              type: object
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all short links for the authenticated user
      tags:
      - Short Links
    post:
      consumes:
      - application/json
      description: Create a new short link for the authenticated user
      parameters:
      - description: Create Link Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateLinkRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Short link created successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.LinkResponse'
              type: object
        "400":
          description: Invalid request body or missing required fields
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new short link
      tags:
      - Short Links
  /short-links/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific short link created by the authenticated user
      parameters:
      - description: Short link ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Short link deleted successfully
        "400":
          description: Invalid link ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Unauthorized access to this link
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Short link not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a short link by ID for the authenticated user
      tags:
      - Short Links
    get:
      consumes:
      - application/json
      description: Retrieve a specific short link created by the authenticated user
      parameters:
      - description: Short link ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Short link retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.LinkResponse'
              type: object
        "400":
          description: Invalid link ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Unauthorized access to this link
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Short link not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a short link by ID for the authenticated user
      tags:
      - Short Links
    put:
      consumes:
      - application/json
      description: Update a specific short link created by the authenticated user
      parameters:
      - description: Short link ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Link Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateLinkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Short link updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.LinkResponse'
              type: object
        "400":
          description: Invalid link ID or request body
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Unauthorized access to this link
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Short link not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a short link by ID for the authenticated user
      tags:
      - Short Links
  /short-links/{id}/status:
    patch:
      consumes:
      - application/json
      description: Activate or deactivate a specific short link created by the authenticated
        user
      parameters:
      - description: Short link ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Short link status toggled successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.LinkResponse'
              type: object
        "400":
          description: Invalid link ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Unauthorized access to this link
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Short link not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Toggle the status of a short link by ID for the authenticated user
      tags:
      - Short Links
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: cookie
    name: access_token
    type: apiKey
swagger: "2.0"
