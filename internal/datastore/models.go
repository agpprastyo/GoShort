// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package datastore

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ShortlinkOrderColumn string

const (
	ShortlinkOrderColumnTitle     ShortlinkOrderColumn = "title"
	ShortlinkOrderColumnIsActive  ShortlinkOrderColumn = "is_active"
	ShortlinkOrderColumnCreatedAt ShortlinkOrderColumn = "created_at"
	ShortlinkOrderColumnUpdatedAt ShortlinkOrderColumn = "updated_at"
	ShortlinkOrderColumnExpiredAt ShortlinkOrderColumn = "expired_at"
)

func (e *ShortlinkOrderColumn) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ShortlinkOrderColumn(s)
	case string:
		*e = ShortlinkOrderColumn(s)
	default:
		return fmt.Errorf("unsupported scan type for ShortlinkOrderColumn: %T", src)
	}
	return nil
}

type NullShortlinkOrderColumn struct {
	ShortlinkOrderColumn ShortlinkOrderColumn `json:"shortlink_order_column"`
	Valid                bool                 `json:"valid"` // Valid is true if ShortlinkOrderColumn is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullShortlinkOrderColumn) Scan(value interface{}) error {
	if value == nil {
		ns.ShortlinkOrderColumn, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ShortlinkOrderColumn.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullShortlinkOrderColumn) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ShortlinkOrderColumn), nil
}

type TokenType string

const (
	TokenTypeRegistrationVerification TokenType = "registration_verification"
	TokenTypePasswordReset            TokenType = "password_reset"
	TokenTypeEmailChangeVerification  TokenType = "email_change_verification"
)

func (e *TokenType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TokenType(s)
	case string:
		*e = TokenType(s)
	default:
		return fmt.Errorf("unsupported scan type for TokenType: %T", src)
	}
	return nil
}

type NullTokenType struct {
	TokenType TokenType `json:"token_type"`
	Valid     bool      `json:"valid"` // Valid is true if TokenType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTokenType) Scan(value interface{}) error {
	if value == nil {
		ns.TokenType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TokenType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTokenType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TokenType), nil
}

type UserOrderColumn string

const (
	UserOrderColumnCreatedAt UserOrderColumn = "created_at"
	UserOrderColumnUsername  UserOrderColumn = "username"
	UserOrderColumnEmail     UserOrderColumn = "email"
	UserOrderColumnFirstName UserOrderColumn = "first_name"
)

func (e *UserOrderColumn) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserOrderColumn(s)
	case string:
		*e = UserOrderColumn(s)
	default:
		return fmt.Errorf("unsupported scan type for UserOrderColumn: %T", src)
	}
	return nil
}

type NullUserOrderColumn struct {
	UserOrderColumn UserOrderColumn `json:"user_order_column"`
	Valid           bool            `json:"valid"` // Valid is true if UserOrderColumn is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserOrderColumn) Scan(value interface{}) error {
	if value == nil {
		ns.UserOrderColumn, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserOrderColumn.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserOrderColumn) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserOrderColumn), nil
}

type UserRole string

const (
	UserRoleAdmin UserRole = "admin"
	UserRoleUser  UserRole = "user"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type LinkStat struct {
	ID         uuid.UUID          `json:"id"`
	LinkID     uuid.UUID          `json:"link_id"`
	ClickTime  pgtype.Timestamptz `json:"click_time"`
	IpAddress  *string            `json:"ip_address"`
	UserAgent  *string            `json:"user_agent"`
	Referrer   *string            `json:"referrer"`
	Country    *string            `json:"country"`
	DeviceType *string            `json:"device_type"`
}

type ShortLink struct {
	ID          uuid.UUID        `json:"id"`
	UserID      uuid.UUID        `json:"user_id"`
	OriginalUrl string           `json:"original_url"`
	ShortCode   string           `json:"short_code"`
	Title       *string          `json:"title"`
	IsActive    bool             `json:"is_active"`
	ClickLimit  *int32           `json:"click_limit"`
	ExpiredAt   pgtype.Timestamp `json:"expired_at"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

type Token struct {
	ID        uuid.UUID          `json:"id"`
	UserID    uuid.UUID          `json:"user_id"`
	TokenHash string             `json:"token_hash"`
	Type      TokenType          `json:"type"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type User struct {
	ID           uuid.UUID          `json:"id"`
	Username     string             `json:"username"`
	PasswordHash string             `json:"password_hash"`
	Email        string             `json:"email"`
	FirstName    *string            `json:"first_name"`
	LastName     *string            `json:"last_name"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	Role         UserRole           `json:"role"`
	IsActive     bool               `json:"is_active"`
}
