// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package datastore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, username, password_hash, email, first_name, last_name, role
) VALUES (
  $1, $2, $3, $4, $5, $6, $7::user_role
)
RETURNING id, username, password_hash, email, first_name, last_name, created_at, updated_at, role, is_active
`

type CreateUserParams struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	PasswordHash string    `json:"password_hash"`
	Email        string    `json:"email"`
	FirstName    *string   `json:"first_name"`
	LastName     *string   `json:"last_name"`
	Role         UserRole  `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.IsActive,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password_hash, email, first_name, last_name, created_at, updated_at, role, is_active FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.IsActive,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, password_hash, email, first_name, last_name, created_at, updated_at, role, is_active FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.IsActive,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, email, first_name, last_name, created_at, updated_at, role, is_active FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.IsActive,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password_hash, email, first_name, last_name, created_at, updated_at, role, is_active FROM users
WHERE
  -- Search functionality - optional search across multiple fields
    ($3::text = '' OR
     username ILIKE '%' || $3 || '%' OR
     email ILIKE '%' || $3 || '%' OR
     first_name ILIKE '%' || $3 || '%' OR
     last_name ILIKE '%' || $3 || '%')
  -- Date range filtering - both dates optional
  AND ($4::timestamptz IS NULL OR created_at >= $4)
  AND ($5::timestamptz IS NULL OR created_at <= $5)
ORDER BY
    CASE
        WHEN $6::user_order_column = 'created_at' AND $7::bool = true THEN created_at
        END ASC,
    CASE
        WHEN $6::user_order_column = 'created_at' AND $7::bool = false THEN created_at
        END DESC,
    CASE
        WHEN $6::user_order_column = 'username' AND $7::bool = true THEN username
        END ASC,
    CASE
        WHEN $6::user_order_column = 'username' AND $7::bool = false THEN username
        END DESC,
    CASE
        WHEN $6::user_order_column = 'email' AND $7::bool = true THEN email
        END ASC,
    CASE
        WHEN $6::user_order_column = 'email' AND $7::bool = false THEN email
        END DESC,
    CASE
        WHEN $6::user_order_column = 'first_name' AND $7::bool = true THEN first_name
        END ASC,
    CASE
        WHEN $6::user_order_column = 'first_name' AND $7::bool = false THEN first_name
        END DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit      int64              `json:"limit"`
	Offset     int64              `json:"offset"`
	SearchText string             `json:"search_text"`
	StartDate  pgtype.Timestamptz `json:"start_date"`
	EndDate    pgtype.Timestamptz `json:"end_date"`
	OrderBy    UserOrderColumn    `json:"order_by"`
	Ascending  bool               `json:"ascending"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers,
		arg.Limit,
		arg.Offset,
		arg.SearchText,
		arg.StartDate,
		arg.EndDate,
		arg.OrderBy,
		arg.Ascending,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Role,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByRole = `-- name: ListUsersByRole :many
SELECT id, username, password_hash, email, first_name, last_name, created_at, updated_at, role, is_active FROM users
WHERE role = $3::user_role
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersByRoleParams struct {
	Limit  int64    `json:"limit"`
	Offset int64    `json:"offset"`
	Role   UserRole `json:"role"`
}

func (q *Queries) ListUsersByRole(ctx context.Context, arg ListUsersByRoleParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByRole, arg.Limit, arg.Offset, arg.Role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Role,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  username = COALESCE($2, username),
  password_hash = COALESCE($3, password_hash),
  email = COALESCE($4, email),
  first_name = COALESCE($5, first_name),
  last_name = COALESCE($6, last_name),
  role = COALESCE($8::user_role, role),
  is_active = COALESCE($7, is_active)
WHERE id = $1
RETURNING id, username, password_hash, email, first_name, last_name, created_at, updated_at, role, is_active
`

type UpdateUserParams struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	PasswordHash string    `json:"password_hash"`
	Email        string    `json:"email"`
	FirstName    *string   `json:"first_name"`
	LastName     *string   `json:"last_name"`
	IsActive     bool      `json:"is_active"`
	Role         UserRole  `json:"role"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.IsActive,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.IsActive,
	)
	return i, err
}
