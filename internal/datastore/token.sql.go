// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: token.sql

package datastore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (id, user_id, token_hash, type, expires_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, token_hash, type, expires_at, created_at, attempts
`

type CreateTokenParams struct {
	ID        uuid.UUID          `json:"id"`
	UserID    uuid.UUID          `json:"user_id"`
	TokenHash string             `json:"token_hash"`
	Type      TokenType          `json:"type"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

// CreateToken inserts a new token into the database.
func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.ID,
		arg.UserID,
		arg.TokenHash,
		arg.Type,
		arg.ExpiresAt,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.Type,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.Attempts,
	)
	return i, err
}

const deleteTokenByID = `-- name: DeleteTokenByID :exec
DELETE FROM tokens
WHERE id = $1
`

// DeleteTokenByID removes a specific token from the database by its ID.
// This is typically used after a token has been successfully used.
func (q *Queries) DeleteTokenByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTokenByID, id)
	return err
}

const deleteTokensByUserIDAndType = `-- name: DeleteTokensByUserIDAndType :exec
DELETE FROM tokens
WHERE user_id = $1 AND type = $2
`

type DeleteTokensByUserIDAndTypeParams struct {
	UserID uuid.UUID `json:"user_id"`
	Type   TokenType `json:"type"`
}

// DeleteTokensByUserIDAndType removes all tokens of a specific type for a given user.
// This is useful for invalidating all existing password reset tokens when a new one is requested.
func (q *Queries) DeleteTokensByUserIDAndType(ctx context.Context, arg DeleteTokensByUserIDAndTypeParams) error {
	_, err := q.db.Exec(ctx, deleteTokensByUserIDAndType, arg.UserID, arg.Type)
	return err
}

const getLatestTokenByUserIDAndType = `-- name: GetLatestTokenByUserIDAndType :one
SELECT id, user_id, token_hash, type, expires_at, created_at, attempts FROM tokens
WHERE user_id = $1 AND type = $2
ORDER BY created_at DESC
LIMIT 1
`

type GetLatestTokenByUserIDAndTypeParams struct {
	UserID uuid.UUID `json:"user_id"`
	Type   TokenType `json:"type"`
}

// GetLatestTokenByUserIDAndType retrieves the most recent token for a user of a specific type.
func (q *Queries) GetLatestTokenByUserIDAndType(ctx context.Context, arg GetLatestTokenByUserIDAndTypeParams) (Token, error) {
	row := q.db.QueryRow(ctx, getLatestTokenByUserIDAndType, arg.UserID, arg.Type)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.Type,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.Attempts,
	)
	return i, err
}

const getTokenByHash = `-- name: GetTokenByHash :one
SELECT t.id, t.user_id, t.token_hash, t.type, t.expires_at, t.created_at, t.attempts, u.is_active as user_is_active
FROM tokens t
         JOIN users u ON t.user_id = u.id
WHERE t.token_hash = $1
LIMIT 1
`

type GetTokenByHashRow struct {
	ID           uuid.UUID          `json:"id"`
	UserID       uuid.UUID          `json:"user_id"`
	TokenHash    string             `json:"token_hash"`
	Type         TokenType          `json:"type"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	Attempts     int16              `json:"attempts"`
	UserIsActive bool               `json:"user_is_active"`
}

// GetTokenByHash retrieves a token and the associated user's active status.
// This is useful for verifying a token and checking if the user's account is already active.
func (q *Queries) GetTokenByHash(ctx context.Context, tokenHash string) (GetTokenByHashRow, error) {
	row := q.db.QueryRow(ctx, getTokenByHash, tokenHash)
	var i GetTokenByHashRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.Type,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.Attempts,
		&i.UserIsActive,
	)
	return i, err
}

const incrementTokenAttempts = `-- name: IncrementTokenAttempts :exec
UPDATE tokens
SET attempts = attempts + 1
WHERE id = $1
`

// IncrementTokenAttempts increases the attempt count for a specific token by one.
func (q *Queries) IncrementTokenAttempts(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, incrementTokenAttempts, id)
	return err
}
