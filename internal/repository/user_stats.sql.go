// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_stats.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getLinkClickStatsByDateRange = `-- name: GetLinkClickStatsByDateRange :many
SELECT
  DATE_TRUNC($2, click_time) AS period,
  COUNT(*) AS clicks
FROM link_stats
WHERE link_id = $1
  AND click_time BETWEEN $3 AND $4
GROUP BY period
ORDER BY period DESC
`

type GetLinkClickStatsByDateRangeParams struct {
	LinkID      uuid.UUID          `json:"link_id"`
	DateTrunc   string             `json:"date_trunc"`
	ClickTime   pgtype.Timestamptz `json:"click_time"`
	ClickTime_2 pgtype.Timestamptz `json:"click_time_2"`
}

type GetLinkClickStatsByDateRangeRow struct {
	Period pgtype.Timestamptz `json:"period"`
	Clicks int64              `json:"clicks"`
}

func (q *Queries) GetLinkClickStatsByDateRange(ctx context.Context, arg GetLinkClickStatsByDateRangeParams) ([]GetLinkClickStatsByDateRangeRow, error) {
	rows, err := q.db.Query(ctx, getLinkClickStatsByDateRange,
		arg.LinkID,
		arg.DateTrunc,
		arg.ClickTime,
		arg.ClickTime_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLinkClickStatsByDateRangeRow{}
	for rows.Next() {
		var i GetLinkClickStatsByDateRangeRow
		if err := rows.Scan(&i.Period, &i.Clicks); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLinkStats = `-- name: GetUserLinkStats :one
SELECT
  COUNT(DISTINCT sl.id) AS total_links,
  COUNT(DISTINCT sl.id) FILTER (WHERE sl.is_active) AS active_links,
  COUNT(DISTINCT sl.id) FILTER (WHERE NOT sl.is_active) AS inactive_links,
  COALESCE(SUM(ls.clicks), 0) AS total_clicks
FROM short_links sl
LEFT JOIN (
  SELECT link_id, COUNT(*) AS clicks
  FROM link_stats
  GROUP BY link_id
) ls ON sl.id = ls.link_id
WHERE sl.user_id = $1
`

type GetUserLinkStatsRow struct {
	TotalLinks    int64          `json:"total_links"`
	ActiveLinks   int64          `json:"active_links"`
	InactiveLinks int64          `json:"inactive_links"`
	TotalClicks   pgtype.Numeric `json:"total_clicks"`
}

func (q *Queries) GetUserLinkStats(ctx context.Context, userID uuid.UUID) (GetUserLinkStatsRow, error) {
	row := q.db.QueryRow(ctx, getUserLinkStats, userID)
	var i GetUserLinkStatsRow
	err := row.Scan(
		&i.TotalLinks,
		&i.ActiveLinks,
		&i.InactiveLinks,
		&i.TotalClicks,
	)
	return i, err
}
