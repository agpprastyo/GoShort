// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: short_links.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkShortCodeExists = `-- name: CheckShortCodeExists :one
SELECT EXISTS(
  SELECT 1 FROM short_links
  WHERE short_code = $1
) AS exists
`

func (q *Queries) CheckShortCodeExists(ctx context.Context, shortCode string) (bool, error) {
	row := q.db.QueryRow(ctx, checkShortCodeExists, shortCode)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createShortLink = `-- name: CreateShortLink :one
INSERT INTO short_links (
  id, user_id, original_url, short_code, title, is_active, click_limit, expired_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, user_id, original_url, short_code, title, is_active, click_limit, expired_at, created_at, updated_at
`

type CreateShortLinkParams struct {
	ID          uuid.UUID        `json:"id"`
	UserID      uuid.UUID        `json:"user_id"`
	OriginalUrl string           `json:"original_url"`
	ShortCode   string           `json:"short_code"`
	Title       *string          `json:"title"`
	IsActive    bool             `json:"is_active"`
	ClickLimit  *int32           `json:"click_limit"`
	ExpiredAt   pgtype.Timestamp `json:"expired_at"`
}

func (q *Queries) CreateShortLink(ctx context.Context, arg CreateShortLinkParams) (ShortLink, error) {
	row := q.db.QueryRow(ctx, createShortLink,
		arg.ID,
		arg.UserID,
		arg.OriginalUrl,
		arg.ShortCode,
		arg.Title,
		arg.IsActive,
		arg.ClickLimit,
		arg.ExpiredAt,
	)
	var i ShortLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.Title,
		&i.IsActive,
		&i.ClickLimit,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateShortLink = `-- name: DeactivateShortLink :one
UPDATE short_links
SET is_active = false
WHERE id = $1
RETURNING id, user_id, original_url, short_code, title, is_active, click_limit, expired_at, created_at, updated_at
`

func (q *Queries) DeactivateShortLink(ctx context.Context, id uuid.UUID) (ShortLink, error) {
	row := q.db.QueryRow(ctx, deactivateShortLink, id)
	var i ShortLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.Title,
		&i.IsActive,
		&i.ClickLimit,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementClickLimit = `-- name: DecrementClickLimit :one
UPDATE short_links
SET click_limit = click_limit - 1
WHERE id = $1 AND click_limit > 0
RETURNING id, user_id, original_url, short_code, title, is_active, click_limit, expired_at, created_at, updated_at
`

func (q *Queries) DecrementClickLimit(ctx context.Context, id uuid.UUID) (ShortLink, error) {
	row := q.db.QueryRow(ctx, decrementClickLimit, id)
	var i ShortLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.Title,
		&i.IsActive,
		&i.ClickLimit,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserShortLink = `-- name: DeleteUserShortLink :exec
DELETE FROM short_links
WHERE id = $1 AND user_id = $2
`

type DeleteUserShortLinkParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteUserShortLink(ctx context.Context, arg DeleteUserShortLinkParams) error {
	_, err := q.db.Exec(ctx, deleteUserShortLink, arg.ID, arg.UserID)
	return err
}

const getActiveShortLinkByCode = `-- name: GetActiveShortLinkByCode :one
SELECT id, user_id, original_url, short_code, title, is_active, click_limit, expired_at, created_at, updated_at FROM short_links
WHERE short_code = $1
AND is_active = true
AND (expired_at IS NULL OR expired_at > NOW())
AND (click_limit IS NULL OR click_limit > 0)
LIMIT 1
`

func (q *Queries) GetActiveShortLinkByCode(ctx context.Context, shortCode string) (ShortLink, error) {
	row := q.db.QueryRow(ctx, getActiveShortLinkByCode, shortCode)
	var i ShortLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.Title,
		&i.IsActive,
		&i.ClickLimit,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShortLink = `-- name: GetShortLink :one
SELECT id, user_id, original_url, short_code, title, is_active, click_limit, expired_at, created_at, updated_at FROM short_links
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetShortLink(ctx context.Context, id uuid.UUID) (ShortLink, error) {
	row := q.db.QueryRow(ctx, getShortLink, id)
	var i ShortLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.Title,
		&i.IsActive,
		&i.ClickLimit,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShortLinkByCode = `-- name: GetShortLinkByCode :one
SELECT id, user_id, original_url, short_code, title, is_active, click_limit, expired_at, created_at, updated_at FROM short_links
WHERE short_code = $1 LIMIT 1
`

func (q *Queries) GetShortLinkByCode(ctx context.Context, shortCode string) (ShortLink, error) {
	row := q.db.QueryRow(ctx, getShortLinkByCode, shortCode)
	var i ShortLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.Title,
		&i.IsActive,
		&i.ClickLimit,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listShortLinks = `-- name: ListShortLinks :many
SELECT id, user_id, original_url, short_code, title, is_active, click_limit, expired_at, created_at, updated_at FROM short_links
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListShortLinksParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListShortLinks(ctx context.Context, arg ListShortLinksParams) ([]ShortLink, error) {
	rows, err := q.db.Query(ctx, listShortLinks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ShortLink{}
	for rows.Next() {
		var i ShortLink
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OriginalUrl,
			&i.ShortCode,
			&i.Title,
			&i.IsActive,
			&i.ClickLimit,
			&i.ExpiredAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserShortLinks = `-- name: ListUserShortLinks :many
SELECT id, user_id, original_url, short_code, title, is_active, click_limit, expired_at, created_at, updated_at FROM short_links
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListUserShortLinksParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int64     `json:"limit"`
	Offset int64     `json:"offset"`
}

func (q *Queries) ListUserShortLinks(ctx context.Context, arg ListUserShortLinksParams) ([]ShortLink, error) {
	rows, err := q.db.Query(ctx, listUserShortLinks, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ShortLink{}
	for rows.Next() {
		var i ShortLink
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OriginalUrl,
			&i.ShortCode,
			&i.Title,
			&i.IsActive,
			&i.ClickLimit,
			&i.ExpiredAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleShortLinkStatus = `-- name: ToggleShortLinkStatus :one
UPDATE short_links
SET is_active = NOT is_active
WHERE id = $1
RETURNING id, user_id, original_url, short_code, title, is_active, click_limit, expired_at, created_at, updated_at
`

func (q *Queries) ToggleShortLinkStatus(ctx context.Context, id uuid.UUID) (ShortLink, error) {
	row := q.db.QueryRow(ctx, toggleShortLinkStatus, id)
	var i ShortLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.Title,
		&i.IsActive,
		&i.ClickLimit,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateShortLink = `-- name: UpdateShortLink :one
UPDATE short_links
SET
  original_url = COALESCE($2, original_url),
  short_code = COALESCE($3, short_code),
  title = COALESCE($4, title),
  is_active = COALESCE($5, is_active),
  click_limit = COALESCE($6, click_limit),
  expired_at = COALESCE($7, expired_at)
WHERE id = $1
RETURNING id, user_id, original_url, short_code, title, is_active, click_limit, expired_at, created_at, updated_at
`

type UpdateShortLinkParams struct {
	ID          uuid.UUID        `json:"id"`
	OriginalUrl string           `json:"original_url"`
	ShortCode   string           `json:"short_code"`
	Title       *string          `json:"title"`
	IsActive    bool             `json:"is_active"`
	ClickLimit  *int32           `json:"click_limit"`
	ExpiredAt   pgtype.Timestamp `json:"expired_at"`
}

func (q *Queries) UpdateShortLink(ctx context.Context, arg UpdateShortLinkParams) (ShortLink, error) {
	row := q.db.QueryRow(ctx, updateShortLink,
		arg.ID,
		arg.OriginalUrl,
		arg.ShortCode,
		arg.Title,
		arg.IsActive,
		arg.ClickLimit,
		arg.ExpiredAt,
	)
	var i ShortLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.Title,
		&i.IsActive,
		&i.ClickLimit,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
